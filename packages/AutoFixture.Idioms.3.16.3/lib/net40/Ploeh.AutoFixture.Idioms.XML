<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Ploeh.AutoFixture.Idioms</name>
    </assembly>
    <members>
        <member name="T:Ploeh.AutoFixture.Idioms.CompositeIdiomaticAssertion">
            <summary>
            Composes an arbitrary number of <see cref="T:Ploeh.AutoFixture.Idioms.IIdiomaticAssertion"/> instances.
            </summary>
        </member>
        <member name="T:Ploeh.AutoFixture.Idioms.IIdiomaticAssertion">
            <summary>
            Represents an encapsulation of an idiomatic unit test assertion based on Reflection types.
            </summary>
            <remarks>
            <para>
            Some unit tests tend to be very repeatable, following common idioms. Some such idiomatic
            tests can be expressed as general methods based on their <see cref="T:System.Type"/> or other
            Reflection-based instances.
            </para>
            </remarks>
        </member>
        <member name="M:Ploeh.AutoFixture.Idioms.IIdiomaticAssertion.Verify(System.Reflection.Assembly[])">
            <summary>
            Verifies that the idiomatic assertion can be verified for the specified assemblies.
            </summary>
            <param name="assemblies">The assemblies.</param>
        </member>
        <member name="M:Ploeh.AutoFixture.Idioms.IIdiomaticAssertion.Verify(System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <summary>
            Verifies that the idiomatic assertion can be verified for the specified assemblies.
            </summary>
            <param name="assemblies">The assemblies.</param>
        </member>
        <member name="M:Ploeh.AutoFixture.Idioms.IIdiomaticAssertion.Verify(System.Reflection.Assembly)">
            <summary>
            Verifies that the idiomatic assertion can be verified for an entire assembly.
            </summary>
            <param name="assembly">The assembly.</param>
        </member>
        <member name="M:Ploeh.AutoFixture.Idioms.IIdiomaticAssertion.Verify(System.Type[])">
            <summary>
            Verifies that the idiomatic assertion can be verified for the specified types.
            </summary>
            <param name="types">The types.</param>
        </member>
        <member name="M:Ploeh.AutoFixture.Idioms.IIdiomaticAssertion.Verify(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Verifies that the idiomatic assertion can be verified for the specified types.
            </summary>
            <param name="types">The types.</param>
        </member>
        <member name="M:Ploeh.AutoFixture.Idioms.IIdiomaticAssertion.Verify(System.Type)">
            <summary>
            Verifies that the idiomatic assertion can be verified for the specified type.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:Ploeh.AutoFixture.Idioms.IIdiomaticAssertion.Verify(System.Reflection.MemberInfo[])">
            <summary>
            Verifies that the idiomatic assertion can be verified for the specified members.
            </summary>
            <param name="memberInfos">The members.</param>
        </member>
        <member name="M:Ploeh.AutoFixture.Idioms.IIdiomaticAssertion.Verify(System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo})">
            <summary>
            Verifies that the idiomatic assertion can be verified for the specified members.
            </summary>
            <param name="memberInfos">The members.</param>
        </member>
        <member name="M:Ploeh.AutoFixture.Idioms.IIdiomaticAssertion.Verify(System.Reflection.MemberInfo)">
            <summary>
            Verifies that the idiomatic assertion can be verified for the specified member.
            </summary>
            <param name="memberInfo">The member.</param>
        </member>
        <member name="M:Ploeh.AutoFixture.Idioms.IIdiomaticAssertion.Verify(System.Reflection.ConstructorInfo[])">
            <summary>
            Verifies that the idiomatic assertion can be verified for the specified constructors.
            </summary>
            <param name="constructorInfos">The constructors.</param>
        </member>
        <member name="M:Ploeh.AutoFixture.Idioms.IIdiomaticAssertion.Verify(System.Collections.Generic.IEnumerable{System.Reflection.ConstructorInfo})">
            <summary>
            Verifies that the idiomatic assertion can be verified for the specified constructors.
            </summary>
            <param name="constructorInfos">The constructors.</param>
        </member>
        <member name="M:Ploeh.AutoFixture.Idioms.IIdiomaticAssertion.Verify(System.Reflection.ConstructorInfo)">
            <summary>
            Verifies that the idiomatic assertion can be verified for the specified constructor.
            </summary>
            <param name="constructorInfo">The constructor.</param>
        </member>
        <member name="M:Ploeh.AutoFixture.Idioms.IIdiomaticAssertion.Verify(System.Reflection.MethodInfo[])">
            <summary>
            Verifies that the idiomatic assertion can be verified for the specified methods.
            </summary>
            <param name="methodInfos">The methods.</param>
        </member>
        <member name="M:Ploeh.AutoFixture.Idioms.IIdiomaticAssertion.Verify(System.Collections.Generic.IEnumerable{System.Reflection.MethodInfo})">
            <summary>
            Verifies that the idiomatic assertion can be verified for the specified methods.
            </summary>
            <param name="methodInfos">The methods.</param>
        </member>
        <member name="M:Ploeh.AutoFixture.Idioms.IIdiomaticAssertion.Verify(System.Reflection.MethodInfo)">
            <summary>
            Verifies that the idiomatic assertion can be verified for the specified method.
            </summary>
            <param name="methodInfo">The method.</param>
        </member>
        <member name="M:Ploeh.AutoFixture.Idioms.IIdiomaticAssertion.Verify(System.Reflection.PropertyInfo[])">
            <summary>
            Verifies that the idiomatic assertion can be verified for the specified properties.
            </summary>
            <param name="propertyInfos">The properties.</param>
        </member>
        <member name="M:Ploeh.AutoFixture.Idioms.IIdiomaticAssertion.Verify(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo})">
            <summary>
            Verifies that the idiomatic assertion can be verified for the specified properties.
            </summary>
            <param name="propertyInfos">The properties.</param>
        </member>
        <member name="M:Ploeh.AutoFixture.Idioms.IIdiomaticAssertion.Verify(System.Reflection.PropertyInfo)">
            <summary>
            Verifies that the idiomatic assertion can be verified for the specified property.
            </summary>
            <param name="propertyInfo">The property.</param>
        </member>
        <member name="M:Ploeh.AutoFixture.Idioms.IIdiomaticAssertion.Verify(System.Reflection.FieldInfo)">
            <summary>
            Verifies that the idiomatic assertion can be verified for the specified field.
            </summary>
            <param name="fieldInfo">The field.</param>
        </member>
        <member name="M:Ploeh.AutoFixture.Idioms.IIdiomaticAssertion.Verify(System.Reflection.FieldInfo[])">
            <summary>
            Verifies that the idiomatic assertion can be verified for the specified fields.
            </summary>
            <param name="fieldInfos">The fields.</param>
        </member>
        <member name="M:Ploeh.AutoFixture.Idioms.IIdiomaticAssertion.Verify(System.Collections.Generic.IEnumerable{System.Reflection.FieldInfo})">
            <summary>
            Verifies that the idiomatic assertion can be verified for the specified fields.
            </summary>
            <param name="fieldInfos">The Fields.</param>
        </member>
        <member name="M:Ploeh.AutoFixture.Idioms.CompositeIdiomaticAssertion.#ctor(Ploeh.AutoFixture.Idioms.IIdiomaticAssertion[])">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.Idioms.CompositeIdiomaticAssertion"/> class with
            the supplied <see cref="T:Ploeh.AutoFixture.Idioms.IIdiomaticAssertion"/> instances.
            </summary>
            <param name="assertions">The encapsulated assertions.</param>
        </member>
        <member name="M:Ploeh.AutoFixture.Idioms.CompositeIdiomaticAssertion.#ctor(System.Collections.Generic.IEnumerable{Ploeh.AutoFixture.Idioms.IIdiomaticAssertion})">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.Idioms.CompositeIdiomaticAssertion"/> class with
            the supplied <see cref="T:Ploeh.AutoFixture.Idioms.IIdiomaticAssertion"/> instances.
            </summary>
            <param name="assertions">The encapsulated assertions.</param>
        </member>
        <member name="M:Ploeh.AutoFixture.Idioms.CompositeIdiomaticAssertion.Verify(System.Reflection.ConstructorInfo)">
            <summary>
            Verifies the behavior of the constructor by delegating the implementation to
            all <see cref="P:Ploeh.AutoFixture.Idioms.CompositeIdiomaticAssertion.Assertions"/>.
            </summary>
            <param name="constructorInfo">The constructor whose behavior must be verified.</param>
        </member>
        <member name="M:Ploeh.AutoFixture.Idioms.CompositeIdiomaticAssertion.Verify(System.Collections.Generic.IEnumerable{System.Reflection.ConstructorInfo})">
            <summary>
            Verifies the behavior of the constructors by delegating the implementation to
            all <see cref="P:Ploeh.AutoFixture.Idioms.CompositeIdiomaticAssertion.Assertions"/>.
            </summary>
            <param name="constructorInfos">The constructors whose behavior must be verified.</param>
        </member>
        <member name="M:Ploeh.AutoFixture.Idioms.CompositeIdiomaticAssertion.Verify(System.Reflection.Assembly[])">
            <summary>
            Verifies the behaviour of the assemblies by delegating the implementation to
            all <see cref="P:Ploeh.AutoFixture.Idioms.CompositeIdiomaticAssertion.Assertions"/>.
            </summary>
            <param name="assemblies">The assemblies whose behaviour must be verified.</param>
        </member>
        <member name="M:Ploeh.AutoFixture.Idioms.CompositeIdiomaticAssertion.Verify(System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <summary>
            Verifies the behaviour of the assemblies by delegating the implementation to
            all <see cref="P:Ploeh.AutoFixture.Idioms.CompositeIdiomaticAssertion.Assertions"/>.
            </summary>
            <param name="assemblies">The assemblies whose behaviour must be verified.</param>
        </member>
        <member name="M:Ploeh.AutoFixture.Idioms.CompositeIdiomaticAssertion.Verify(System.Reflection.Assembly)">
            <summary>
            Verifies the behaviour of the assembly by delegating the implementation to
            all <see cref="P:Ploeh.AutoFixture.Idioms.CompositeIdiomaticAssertion.Assertions"/>.
            </summary>
            <param name="assembly">The assembly whose behaviour must be verified.</param>
        </member>
        <member name="M:Ploeh.AutoFixture.Idioms.CompositeIdiomaticAssertion.Verify(System.Type[])">
            <summary>
            Verifies the behaviour of the types by delegating the implementation to
            all <see cref="P:Ploeh.AutoFixture.Idioms.CompositeIdiomaticAssertion.Assertions"/>.
            </summary>
            <param name="types">The types whose behaviour must be verified.</param>
        </member>
        <member name="M:Ploeh.AutoFixture.Idioms.CompositeIdiomaticAssertion.Verify(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Verifies the behaviour of the types by delegating the implementation to
            all <see cref="P:Ploeh.AutoFixture.Idioms.CompositeIdiomaticAssertion.Assertions"/>.
            </summary>
            <param name="types">The types whose behaviour must be verified.</param>
        </member>
        <member name="M:Ploeh.AutoFixture.Idioms.CompositeIdiomaticAssertion.Verify(System.Type)">
            <summary>
            Verifies the behaviour of the type by delegating the implementation to
            all <see cref="P:Ploeh.AutoFixture.Idioms.CompositeIdiomaticAssertion.Assertions"/>.
            </summary>
            <param name="type">The type whose behaviour must be verified.</param>
        </member>
        <member name="M:Ploeh.AutoFixture.Idioms.CompositeIdiomaticAssertion.Verify(System.Reflection.MemberInfo[])">
            <summary>
            Verifies the behaviour of the members by delegating the implementation to
            all <see cref="P:Ploeh.AutoFixture.Idioms.CompositeIdiomaticAssertion.Assertions"/>.
            </summary>
            <param name="memberInfos">The members whose behaviour must be verified.</param>
        </member>
        <member name="M:Ploeh.AutoFixture.Idioms.CompositeIdiomaticAssertion.Verify(System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo})">
            <summary>
            Verifies the behaviour of the members by delegating the implementation to
            all <see cref="P:Ploeh.AutoFixture.Idioms.CompositeIdiomaticAssertion.Assertions"/>.
            </summary>
            <param name="memberInfos">The members whose behaviour must be verified.</param>
        </member>
        <member name="M:Ploeh.AutoFixture.Idioms.CompositeIdiomaticAssertion.Verify(System.Reflection.MemberInfo)">
            <summary>
            Verifies the behaviour of the member by delegating the implementation to
            all <see cref="P:Ploeh.AutoFixture.Idioms.CompositeIdiomaticAssertion.Assertions"/>.
            </summary>
            <param name="memberInfo">The member whose behaviour must be verified.</param>
        </member>
        <member name="M:Ploeh.AutoFixture.Idioms.CompositeIdiomaticAssertion.Verify(System.Reflection.ConstructorInfo[])">
            <summary>
            Verifies the behavior of the constructors by delegating the implementation to
            all <see cref="P:Ploeh.AutoFixture.Idioms.CompositeIdiomaticAssertion.Assertions"/>.
            </summary>
            <param name="constructorInfos">The constructors whose behavior must be verified.</param>
        </member>
        <member name="M:Ploeh.AutoFixture.Idioms.CompositeIdiomaticAssertion.Verify(System.Reflection.MethodInfo)">
            <summary>
            Verifies the behavior of the constructor by delegating the implementation to
            all <see cref="P:Ploeh.AutoFixture.Idioms.CompositeIdiomaticAssertion.Assertions"/>.
            </summary>
            <param name="methodInfo">The method whose behavior must be verified.</param>
        </member>
        <member name="M:Ploeh.AutoFixture.Idioms.CompositeIdiomaticAssertion.Verify(System.Collections.Generic.IEnumerable{System.Reflection.MethodInfo})">
            <summary>
            Verifies the behavior of the methods by delegating the implementation to
            all <see cref="P:Ploeh.AutoFixture.Idioms.CompositeIdiomaticAssertion.Assertions"/>.
            </summary>
            <param name="methodInfos">The methods whose behavior must be verified.</param>
        </member>
        <member name="M:Ploeh.AutoFixture.Idioms.CompositeIdiomaticAssertion.Verify(System.Reflection.MethodInfo[])">
            <summary>
            Verifies the behavior of the methods by delegating the implementation to
            all <see cref="P:Ploeh.AutoFixture.Idioms.CompositeIdiomaticAssertion.Assertions"/>.
            </summary>
            <param name="methodInfos">The methods whose behavior must be verified.</param>
        </member>
        <member name="M:Ploeh.AutoFixture.Idioms.CompositeIdiomaticAssertion.Verify(System.Reflection.PropertyInfo)">
            <summary>
            Verifies the behavior of the property by delegating the implementation to
            all <see cref="P:Ploeh.AutoFixture.Idioms.CompositeIdiomaticAssertion.Assertions"/>.
            </summary>
            <param name="propertyInfo">The property whose behavior must be verified.</param>
        </member>
        <member name="M:Ploeh.AutoFixture.Idioms.CompositeIdiomaticAssertion.Verify(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo})">
            <summary>
            Verifies the behavior of the properties by delegating the implementation to
            all <see cref="P:Ploeh.AutoFixture.Idioms.CompositeIdiomaticAssertion.Assertions"/>.
            </summary>
            <param name="propertyInfos">The properties whose behavior must be verified.</param>
        </member>
        <member name="M:Ploeh.AutoFixture.Idioms.CompositeIdiomaticAssertion.Verify(System.Reflection.PropertyInfo[])">
            <summary>
            Verifies the behavior of the properties by delegating the implementation to
            all <see cref="P:Ploeh.AutoFixture.Idioms.CompositeIdiomaticAssertion.Assertions"/>.
            </summary>
            <param name="propertyInfos">The properties whose behavior must be verified.</param>
        </member>
        <member name="M:Ploeh.AutoFixture.Idioms.CompositeIdiomaticAssertion.Verify(System.Reflection.FieldInfo)">
            <summary>
            Verifies the behavior of the field by delegating the implementation to
            all <see cref="P:Ploeh.AutoFixture.Idioms.CompositeIdiomaticAssertion.Assertions"/>.
            </summary>
            <param name="fieldInfo">The field whose behavior must be verified.</param>
        </member>
        <member name="M:Ploeh.AutoFixture.Idioms.CompositeIdiomaticAssertion.Verify(System.Collections.Generic.IEnumerable{System.Reflection.FieldInfo})">
            <summary>
            Verifies the behavior of the fields by delegating the implementation to
            all <see cref="P:Ploeh.AutoFixture.Idioms.CompositeIdiomaticAssertion.Assertions"/>.
            </summary>
            <param name="fieldInfos">The fields whose behavior must be verified.</param>
        </member>
        <member name="M:Ploeh.AutoFixture.Idioms.CompositeIdiomaticAssertion.Verify(System.Reflection.FieldInfo[])">
            <summary>
            Verifies the behavior of the fields by delegating the implementation to
            all <see cref="P:Ploeh.AutoFixture.Idioms.CompositeIdiomaticAssertion.Assertions"/>.
            </summary>
            <param name="fieldInfos">The fields whose behavior must be verified.</param>
        </member>
        <member name="P:Ploeh.AutoFixture.Idioms.CompositeIdiomaticAssertion.Assertions">
            <summary>
            Gets the assertions supplied via the constructor.
            </summary>
        </member>
        <member name="T:Ploeh.AutoFixture.Idioms.CopyAndUpdateAssertion">
            <summary>
            Encapsulates a unit test which verifies a method correctly makes a copy of an
            object while updating one or more public properties or fields.
            </summary>
            <remarks>
            <para>
            When dealing with immutable types, it can be useful to add a convenience method
            to change a single field/property in a more complex object; e.g.
            <code>
            public Foo WithBar(Bar newBar)
            {
                return new Foo(this.baz, newBar, this.qux);
            }
            </code>
            </para>
            Testing this not only requires verification that newBar was properly used (and exposed
            as a field or Inspection Property), but that all other values contained by Foo are held
            constant.
            </remarks>
        </member>
        <member name="T:Ploeh.AutoFixture.Idioms.IdiomaticAssertion">
            <summary>
            Base implementation of <see cref="T:Ploeh.AutoFixture.Idioms.IIdiomaticAssertion"/>.
            </summary>
            <remarks>
            <para>
            IdiomaticAssertion provides default implementations of all methods of
            <see cref="T:Ploeh.AutoFixture.Idioms.IIdiomaticAssertion"/>, making sure that higher-order methods call into
            lower-order methods; e.g. that <see cref="M:Ploeh.AutoFixture.Idioms.IdiomaticAssertion.Verify(System.Reflection.Assembly)"/> calls
            <see cref="M:Ploeh.AutoFixture.Idioms.IdiomaticAssertion.Verify(System.Type[])"/> with all public types in the assembly.
            </para>
            <para>
            Implementers can override the appropriate methods instead of creating an implementation of
            IIdiomaticAssertion completely from scratch.
            </para>
            </remarks>
        </member>
        <member name="M:Ploeh.AutoFixture.Idioms.IdiomaticAssertion.Verify(System.Reflection.Assembly[])">
            <summary>
            Calls <see cref="M:Ploeh.AutoFixture.Idioms.IdiomaticAssertion.Verify(System.Reflection.Assembly)"/> for each Assembly in
            <paramref name="assemblies"/>.
            </summary>
            <param name="assemblies">The assemblies.</param>
        </member>
        <member name="M:Ploeh.AutoFixture.Idioms.IdiomaticAssertion.Verify(System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <summary>
            Calls <see cref="M:Ploeh.AutoFixture.Idioms.IdiomaticAssertion.Verify(System.Reflection.Assembly)"/> for each Assembly in
            <paramref name="assemblies"/>.
            </summary>
            <param name="assemblies">The assemblies.</param>
        </member>
        <member name="M:Ploeh.AutoFixture.Idioms.IdiomaticAssertion.Verify(System.Reflection.Assembly)">
            <summary>
            Calls <see cref="M:Ploeh.AutoFixture.Idioms.IdiomaticAssertion.Verify(System.Type[])"/> for each public Type in
            <paramref name="assembly"/>.
            </summary>
            <param name="assembly">The assembly.</param>
        </member>
        <member name="M:Ploeh.AutoFixture.Idioms.IdiomaticAssertion.Verify(System.Type[])">
            <summary>
            Calls <see cref="M:Ploeh.AutoFixture.Idioms.IdiomaticAssertion.Verify(System.Type)"/> for each Type in <paramref name="types"/>.
            </summary>
            <param name="types">The types.</param>
        </member>
        <member name="M:Ploeh.AutoFixture.Idioms.IdiomaticAssertion.Verify(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Calls <see cref="M:Ploeh.AutoFixture.Idioms.IdiomaticAssertion.Verify(System.Type)"/> for each Type in <paramref name="types"/>.
            </summary>
            <param name="types">The types.</param>
        </member>
        <member name="M:Ploeh.AutoFixture.Idioms.IdiomaticAssertion.Verify(System.Type)">
            <summary>
            Calls <see cref="M:Ploeh.AutoFixture.Idioms.IdiomaticAssertion.Verify(System.Reflection.ConstructorInfo[])"/>, <see cref="M:Ploeh.AutoFixture.Idioms.IdiomaticAssertion.Verify(System.Reflection.MethodInfo[])"/> and
            <see cref="M:Ploeh.AutoFixture.Idioms.IdiomaticAssertion.Verify(System.Reflection.PropertyInfo[])"/> for each constructor, method and property in
            <paramref name="type"/>.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:Ploeh.AutoFixture.Idioms.IdiomaticAssertion.Verify(System.Reflection.MemberInfo[])">
            <summary>
            Calls <see cref="M:Ploeh.AutoFixture.Idioms.IdiomaticAssertion.Verify(System.Reflection.MemberInfo)"/> for each member in
            <paramref name="memberInfos"/>.
            </summary>
            <param name="memberInfos">The members.</param>
        </member>
        <member name="M:Ploeh.AutoFixture.Idioms.IdiomaticAssertion.Verify(System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo})">
            <summary>
            Calls <see cref="M:Ploeh.AutoFixture.Idioms.IdiomaticAssertion.Verify(System.Reflection.MemberInfo)"/> for each member in
            <paramref name="memberInfos"/>.
            </summary>
            <param name="memberInfos">The members.</param>
        </member>
        <member name="M:Ploeh.AutoFixture.Idioms.IdiomaticAssertion.Verify(System.Reflection.MemberInfo)">
            <summary>
            Calls <see cref="M:Ploeh.AutoFixture.Idioms.IdiomaticAssertion.Verify(System.Reflection.ConstructorInfo)"/>, <see cref="T:System.Reflection.MethodInfo"/>,
            <see cref="T:System.Reflection.PropertyInfo"/>, or <see cref="T:System.Reflection.FieldInfo"/>, depending on the subtype of
            <paramref name="memberInfo"/>.
            </summary>
            <param name="memberInfo">The member.</param>
        </member>
        <member name="M:Ploeh.AutoFixture.Idioms.IdiomaticAssertion.Verify(System.Reflection.ConstructorInfo[])">
            <summary>
            Calls <see cref="M:Ploeh.AutoFixture.Idioms.IdiomaticAssertion.Verify(System.Reflection.ConstructorInfo)"/> for each ConstructorInfo in
            <paramref name="constructorInfos"/>.
            </summary>
            <param name="constructorInfos">The constructors.</param>
        </member>
        <member name="M:Ploeh.AutoFixture.Idioms.IdiomaticAssertion.Verify(System.Collections.Generic.IEnumerable{System.Reflection.ConstructorInfo})">
            <summary>
            Calls <see cref="M:Ploeh.AutoFixture.Idioms.IdiomaticAssertion.Verify(System.Reflection.ConstructorInfo)"/> for each ConstructorInfo in
            <paramref name="constructorInfos"/>.
            </summary>
            <param name="constructorInfos">The constructors.</param>
        </member>
        <member name="M:Ploeh.AutoFixture.Idioms.IdiomaticAssertion.Verify(System.Reflection.FieldInfo)">
            <summary>
            Does nothing. Override to implement.
            </summary>
            <param name="fieldInfo">The field.</param>
        </member>
        <member name="M:Ploeh.AutoFixture.Idioms.IdiomaticAssertion.Verify(System.Reflection.FieldInfo[])">
            <summary>
            Calls <see cref="M:Ploeh.AutoFixture.Idioms.IdiomaticAssertion.Verify(System.Reflection.FieldInfo)"/> for each FieldInfo in
            <paramref name="fieldInfos"/>.
            </summary>
            <param name="fieldInfos">The fields.</param>
        </member>
        <member name="M:Ploeh.AutoFixture.Idioms.IdiomaticAssertion.Verify(System.Collections.Generic.IEnumerable{System.Reflection.FieldInfo})">
            <summary>
            Calls <see cref="M:Ploeh.AutoFixture.Idioms.IdiomaticAssertion.Verify(System.Reflection.FieldInfo)"/> for each FieldInfo in
            <paramref name="fieldInfos"/>.
            </summary>
            <param name="fieldInfos">The Fields.</param>
        </member>
        <member name="M:Ploeh.AutoFixture.Idioms.IdiomaticAssertion.Verify(System.Reflection.ConstructorInfo)">
            <summary>
            Does nothing. Override to implement.
            </summary>
            <param name="constructorInfo">The constructor.</param>
        </member>
        <member name="M:Ploeh.AutoFixture.Idioms.IdiomaticAssertion.Verify(System.Reflection.MethodInfo[])">
            <summary>
            Calls <see cref="M:Ploeh.AutoFixture.Idioms.IdiomaticAssertion.Verify(System.Reflection.MethodInfo)"/> for each MethodInfo in
            <paramref name="methodInfos"/>.
            </summary>
            <param name="methodInfos">The methods.</param>
        </member>
        <member name="M:Ploeh.AutoFixture.Idioms.IdiomaticAssertion.Verify(System.Collections.Generic.IEnumerable{System.Reflection.MethodInfo})">
            <summary>
            Calls <see cref="M:Ploeh.AutoFixture.Idioms.IdiomaticAssertion.Verify(System.Reflection.MethodInfo)"/> for each MethodInfo in
            <paramref name="methodInfos"/>.
            </summary>
            <param name="methodInfos">The methods.</param>
        </member>
        <member name="M:Ploeh.AutoFixture.Idioms.IdiomaticAssertion.Verify(System.Reflection.MethodInfo)">
            <summary>
            Does nothing. Override to implement.
            </summary>
            <param name="methodInfo">The method.</param>
        </member>
        <member name="M:Ploeh.AutoFixture.Idioms.IdiomaticAssertion.Verify(System.Reflection.PropertyInfo[])">
            <summary>
            Calls <see cref="M:Ploeh.AutoFixture.Idioms.IdiomaticAssertion.Verify(System.Reflection.PropertyInfo)"/> for each PropertyInfo in
            <paramref name="propertyInfos"/>.
            </summary>
            <param name="propertyInfos">The properties.</param>
        </member>
        <member name="M:Ploeh.AutoFixture.Idioms.IdiomaticAssertion.Verify(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo})">
            <summary>
            Calls <see cref="M:Ploeh.AutoFixture.Idioms.IdiomaticAssertion.Verify(System.Reflection.PropertyInfo)"/> for each PropertyInfo in
            <paramref name="propertyInfos"/>.
            </summary>
            <param name="propertyInfos">The properties.</param>
        </member>
        <member name="M:Ploeh.AutoFixture.Idioms.IdiomaticAssertion.Verify(System.Reflection.PropertyInfo)">
            <summary>
            Does nothing. Override to implement.
            </summary>
            <param name="propertyInfo">The property.</param>
        </member>
        <member name="M:Ploeh.AutoFixture.Idioms.CopyAndUpdateAssertion.#ctor(Ploeh.AutoFixture.Kernel.ISpecimenBuilder,System.Collections.IEqualityComparer,System.Collections.Generic.IEqualityComparer{Ploeh.Albedo.IReflectionElement})">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.Idioms.CopyAndUpdateAssertion"/> class.
            </summary>
            <param name="builder">
            A composer which can create instances required to implement the idiomatic unit test.
            </param>
            <param name="comparer">A comparer that compares public member values from the
            specimen with public member values from the 'copied' and updated' instance</param>
            <param name="parameterMemberMatcher">Allows customizing the way 'updated' parameters
            are matched to members. The boolean value returned from
            <see cref="M:System.Collections.Generic.IEqualityComparer`1.Equals(`0,`0)"/> indicates if the parameter and member
            are matched.
            </param>
            <remarks>
            <para>
            <paramref name="builder"/> will typically be a <see cref="T:Ploeh.AutoFixture.Fixture"/> instance.
            </para>
            </remarks>
        </member>
        <member name="M:Ploeh.AutoFixture.Idioms.CopyAndUpdateAssertion.#ctor(Ploeh.AutoFixture.Kernel.ISpecimenBuilder,System.Collections.IEqualityComparer)">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.Idioms.CopyAndUpdateAssertion"/> class.
            </summary>
            <param name="builder">
            A composer which can create instances required to implement the idiomatic unit test.
            </param>
            <param name="comparer">A comparer that compares public member values from the
            specimen with public member values from the 'copied' and updated' instance</param>
            <remarks>
            <para>
            <paramref name="builder"/> will typically be a <see cref="T:Ploeh.AutoFixture.Fixture"/> instance.
            </para>
            </remarks>
        </member>
        <member name="M:Ploeh.AutoFixture.Idioms.CopyAndUpdateAssertion.#ctor(Ploeh.AutoFixture.Kernel.ISpecimenBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.Idioms.CopyAndUpdateAssertion"/> class.
            </summary>
            <param name="builder">
            A composer which can create instances required to implement the idiomatic unit test.
            </param>
            <remarks>
            <para>
            <paramref name="builder"/> will typically be a <see cref="T:Ploeh.AutoFixture.Fixture"/> instance.
            </para>
            </remarks>
        </member>
        <member name="M:Ploeh.AutoFixture.Idioms.CopyAndUpdateAssertion.Verify(System.Reflection.MethodInfo)">
            <summary>
            Verifies that a method correctly makes a copy of an object while changing                                  
            one or more public properties or fields.
            </summary>
            <param name="methodInfo">The 'copy and update' method to verify</param>
        </member>
        <member name="P:Ploeh.AutoFixture.Idioms.CopyAndUpdateAssertion.Builder">
            <summary>
            Gets the builder supplied by the constructor.
            </summary>
        </member>
        <member name="P:Ploeh.AutoFixture.Idioms.CopyAndUpdateAssertion.Comparer">
            <summary>
            Gets the comparer that tests for equality of the values on the specimen and the
            'copied and updated' specimen.
            </summary>
        </member>
        <member name="P:Ploeh.AutoFixture.Idioms.CopyAndUpdateAssertion.ParameterMemberMatcher">
            <summary>
            Gets the comparer instance which is used to determine if a 'copy and update' method 
            parameter matches a given public member (property or field).
            </summary>
            <remarks>
            If the parameter and member are matched, the member is expected to be initialized
            from the value given to the parameter. A return value of <see langword="true"/> from
            the <see cref="M:System.Collections.Generic.IEqualityComparer`1.Equals(`0,`0)"/> method means the parameter and 
            member are 'matched'.
            </remarks>
        </member>
        <member name="T:Ploeh.AutoFixture.Idioms.ReflectionVisitorElementComparer`1">
            <summary>
            Allows comparing <see cref="T:Ploeh.Albedo.IReflectionElement"/> instances, where the comparison
            is implemented by collecting the elements using an <see cref="T:Ploeh.Albedo.IReflectionVisitor`1"/>
            then comparing them using
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Ploeh.AutoFixture.Idioms.CopyAndUpdateException">
            <summary>
            Represents an error about a method that incorrectly implements the idiom tested
            by the <see cref="T:Ploeh.AutoFixture.Idioms.CopyAndUpdateAssertion"/>.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.Idioms.CopyAndUpdateException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.Idioms.CopyAndUpdateException"/> class.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.Idioms.CopyAndUpdateException.#ctor(System.String,System.Reflection.MethodInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.Idioms.CopyAndUpdateException"/> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="methodInfo">The 'copy and update' method which was ill-behaved.</param>
        </member>
        <member name="M:Ploeh.AutoFixture.Idioms.CopyAndUpdateException.#ctor(System.Reflection.MethodInfo,System.Reflection.MemberInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.Idioms.CopyAndUpdateException"/> class.
            </summary>
            <param name="methodInfo">The 'copy and update' method which was ill-behaved.</param>
            <param name="memberWithInvalidValue">The member which has the invalid value after copy and update.</param>
        </member>
        <member name="M:Ploeh.AutoFixture.Idioms.CopyAndUpdateException.#ctor(System.Reflection.MethodInfo,System.Reflection.ParameterInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.Idioms.CopyAndUpdateException"/> class.
            </summary>
            <param name="methodInfo">The 'copy and update' method which was ill-behaved.</param>
            <param name="argumentWithNoMatchingPublicMember">The parameter which has no matching public member.</param>
        </member>
        <member name="M:Ploeh.AutoFixture.Idioms.CopyAndUpdateException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.Idioms.CopyAndUpdateException"/> class.
            </summary>
            <param name="message">
            The error message that explains the reason for the exception.
            </param>
        </member>
        <member name="M:Ploeh.AutoFixture.Idioms.CopyAndUpdateException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.Idioms.CopyAndUpdateException"/> class.
            </summary>
            <param name="message">
            The error message that explains the reason for the exception.
            </param>
            <param name="innerException">
            The exception that is the cause of the current exception.
            </param>
        </member>
        <member name="M:Ploeh.AutoFixture.Idioms.CopyAndUpdateException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.Idioms.CopyAndUpdateException"/> class.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the
            serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains
            contextual information about the source or destination.
            </param>
        </member>
        <member name="M:Ploeh.AutoFixture.Idioms.CopyAndUpdateException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Adds <see cref="T:System.Reflection.PropertyInfo"/> to a
            <see cref="T:System.Runtime.Serialization.SerializationInfo"/>.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the
            serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains
            contextual information about the source or destination.
            </param>
        </member>
        <member name="P:Ploeh.AutoFixture.Idioms.CopyAndUpdateException.MethodInfo">
            <summary>
            Gets the 'copy and update' method which is ill-behaved.
            </summary>
        </member>
        <member name="P:Ploeh.AutoFixture.Idioms.CopyAndUpdateException.MemberWithInvalidValue">
            <summary>
            Gets the member which was found to have an incorrect value.
            </summary>
        </member>
        <member name="P:Ploeh.AutoFixture.Idioms.CopyAndUpdateException.ArgumentWithNoMatchingPublicMember">
            <summary>
            Gets the argument of the 'copy and update' method for which no matching public
            member could be found.
            </summary>
        </member>
        <member name="T:Ploeh.AutoFixture.Idioms.EqualsOverrideException">
            <summary>
            Represents an error about an ill-behaved override of the <see cref="M:System.Object.Equals(System.Object)"/>
            method.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.Idioms.EqualsOverrideException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.Idioms.EqualsOverrideException"/> class.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.Idioms.EqualsOverrideException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.Idioms.EqualsOverrideException"/> class.
            </summary>
            <param name="message">
            The error message that explains the reason for the exception.
            </param>
        </member>
        <member name="M:Ploeh.AutoFixture.Idioms.EqualsOverrideException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.Idioms.EqualsOverrideException"/> class.
            </summary>
            <param name="message">
            The error message that explains the reason for the exception.
            </param>
            <param name="innerException">
            The exception that is the cause of the current exception.
            </param>
        </member>
        <member name="M:Ploeh.AutoFixture.Idioms.EqualsOverrideException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.Idioms.EqualsOverrideException"/> class.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the
            serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains
            contextual information about the source or destination.
            </param>
        </member>
        <member name="T:Ploeh.AutoFixture.Idioms.CompositeBehaviorExpectation">
            <summary>
            Composes an arbitrary number of <see cref="T:Ploeh.AutoFixture.Idioms.IBehaviorExpectation"/> instances.
            </summary>
        </member>
        <member name="T:Ploeh.AutoFixture.Idioms.IBehaviorExpectation">
            <summary>
            Represents an expectation about the behavior when an <see cref="T:Ploeh.AutoFixture.Idioms.IGuardClauseCommand"/> is
            invoked.
            </summary>
            <remarks>
            <para>
            This interface is a rather specialized interface supporting the implementation of
            <see cref="T:Ploeh.AutoFixture.Idioms.GuardClauseAssertion"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Ploeh.AutoFixture.Idioms.IBehaviorExpectation.Verify(Ploeh.AutoFixture.Idioms.IGuardClauseCommand)">
            <summary>
            Verifies the behavior of the command.
            </summary>
            <param name="command">The command whose behavior must be examined.</param>
        </member>
        <member name="M:Ploeh.AutoFixture.Idioms.CompositeBehaviorExpectation.#ctor(Ploeh.AutoFixture.Idioms.IBehaviorExpectation[])">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.Idioms.CompositeBehaviorExpectation"/> class with
            the supplied <see cref="T:Ploeh.AutoFixture.Idioms.IBehaviorExpectation"/> instances.
            </summary>
            <param name="behaviorExpectations">The encapsulated behavior expectations.</param>
            <seealso cref="M:Ploeh.AutoFixture.Idioms.CompositeBehaviorExpectation.#ctor(System.Collections.Generic.IEnumerable{Ploeh.AutoFixture.Idioms.IBehaviorExpectation})"/>
            <seealso cref="P:Ploeh.AutoFixture.Idioms.CompositeBehaviorExpectation.BehaviorExpectations"/>
        </member>
        <member name="M:Ploeh.AutoFixture.Idioms.CompositeBehaviorExpectation.#ctor(System.Collections.Generic.IEnumerable{Ploeh.AutoFixture.Idioms.IBehaviorExpectation})">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.Idioms.CompositeBehaviorExpectation"/> class with
            the supplied <see cref="T:Ploeh.AutoFixture.Idioms.IBehaviorExpectation"/> instances.
            </summary>
            <param name="behaviorExpectations">The encapsulated behavior expectations.</param>
            <seealso cref="M:Ploeh.AutoFixture.Idioms.CompositeBehaviorExpectation.#ctor(Ploeh.AutoFixture.Idioms.IBehaviorExpectation[])"/>
            <seealso cref="P:Ploeh.AutoFixture.Idioms.CompositeBehaviorExpectation.BehaviorExpectations"/>
        </member>
        <member name="M:Ploeh.AutoFixture.Idioms.CompositeBehaviorExpectation.Verify(Ploeh.AutoFixture.Idioms.IGuardClauseCommand)">
            <summary>
            Verifies the behavior of the command by delegating the implementation to all
            <see cref="P:Ploeh.AutoFixture.Idioms.CompositeBehaviorExpectation.BehaviorExpectations"/>.
            </summary>
            <param name="command">The command whose behavior must be examined.</param>
        </member>
        <member name="P:Ploeh.AutoFixture.Idioms.CompositeBehaviorExpectation.BehaviorExpectations">
            <summary>
            Gets the behavior expectations supplied via the constructor.
            </summary>
            <seealso cref="M:Ploeh.AutoFixture.Idioms.CompositeBehaviorExpectation.#ctor(Ploeh.AutoFixture.Idioms.IBehaviorExpectation[])"/>
            <seealso cref="M:Ploeh.AutoFixture.Idioms.CompositeBehaviorExpectation.#ctor(System.Collections.Generic.IEnumerable{Ploeh.AutoFixture.Idioms.IBehaviorExpectation})"/>
        </member>
        <member name="T:Ploeh.AutoFixture.Idioms.EmptyGuidBehaviorExpectation">
            <summary>
            Encapsulates the expected behavior when an <see cref="T:Ploeh.AutoFixture.Idioms.IGuardClauseCommand"/> (typically
            representing a method or constructor) is invoked with a <see cref="F:System.Guid.Empty"/> argument.
            </summary>
            <seealso cref="M:Ploeh.AutoFixture.Idioms.EmptyGuidBehaviorExpectation.Verify(Ploeh.AutoFixture.Idioms.IGuardClauseCommand)"/>
        </member>
        <member name="M:Ploeh.AutoFixture.Idioms.EmptyGuidBehaviorExpectation.Verify(Ploeh.AutoFixture.Idioms.IGuardClauseCommand)">
            <summary>
            Verifies the behavior of the command when invoked with <see cref="F:System.Guid.Empty"/>.
            </summary>
            <param name="command">The command whose behavior must be examined.</param>
            <remarks>
            <para>
            This method encapsulates the behavior which is expected when a method or constructor is
            invoked with <see cref="F:System.Guid.Empty"/> as one of the method arguments. In that case it's
            expected that invoking <paramref name="command"/> with Guid.Empty throws an
            <see cref="T:System.ArgumentException"/>, causing the Verify method to succeed. If other
            exceptions are thrown, or no exception is thrown when invoking the command, the Verify
            method throws an exception.
            </para>
            </remarks>
        </member>
        <member name="T:Ploeh.AutoFixture.Idioms.IExpansion`1">
            <summary>
            Represents an operation that somehow expands a single value into a sequence.
            </summary>
            <typeparam name="T">The type of item being expanded.</typeparam>
        </member>
        <member name="M:Ploeh.AutoFixture.Idioms.IExpansion`1.Expand(`0)">
            <summary>
            Expands a value into a sequence of values.
            </summary>
            <param name="value">The value to expand.</param>
            <returns>A sequence of values.</returns>
            <remarks>
            <para>
            In a sense, an expansion is the opposite as an aggregation. Given a single value the
            result is a sequence produced from the value. There's no inherent definition on how
            such a sequence is produced or what the values in the sequence will be.
            <paramref name="value"/> may or may not be contained in the result.
            </para>
            <para>
            Implementations could, for example, simply produce a sequence with the input value as
            the single element, or it could produce a sequence where the input value is repeated a
            number of times. Other options are also possible.
            </para>
            </remarks>
        </member>
        <member name="T:Ploeh.AutoFixture.Idioms.IndexedReplacement`1">
            <summary>
            Replaces an indexed element in a sequence with a given value.
            </summary>
            <typeparam name="T">
            The type of the items in the sequences consumed and produced.
            </typeparam>
        </member>
        <member name="M:Ploeh.AutoFixture.Idioms.IndexedReplacement`1.#ctor(System.Int32,`0[])">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.Idioms.IndexedReplacement`1"/> class.
            </summary>
            <param name="replacementIndex">
            The index of the element which should be replaced.
            </param>
            <param name="source">The sequence in which an element should be replaced.</param>
            <remarks>
            <para>
            When <see cref="M:Ploeh.AutoFixture.Idioms.IndexedReplacement`1.Expand(`0)"/> is invoked, the element at
            <paramref name="replacementIndex"/> in <paramref name="source"/> will be replaced by
            the new value. The index is zero-based.
            </para>
            </remarks>
            <seealso cref="M:Ploeh.AutoFixture.Idioms.IndexedReplacement`1.Expand(`0)"/>
        </member>
        <member name="M:Ploeh.AutoFixture.Idioms.IndexedReplacement`1.#ctor(System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.Idioms.IndexedReplacement`1"/> class.
            </summary>
            <param name="replacementIndex">
            The index of the element which should be replaced.
            </param>
            <param name="source">The sequence in which an element should be replaced.</param>
            <remarks>
            <para>
            When <see cref="M:Ploeh.AutoFixture.Idioms.IndexedReplacement`1.Expand(`0)"/> is invoked, the element at
            <paramref name="replacementIndex"/> in <paramref name="source"/> will be replaced by
            the new value. The index is zero-based.
            </para>
            </remarks>
            <seealso cref="M:Ploeh.AutoFixture.Idioms.IndexedReplacement`1.Expand(`0)"/>        
        </member>
        <member name="M:Ploeh.AutoFixture.Idioms.IndexedReplacement`1.Expand(`0)">
            <summary>
            Replaces the pre-selected element in the source sequence with a new element.
            </summary>
            <param name="value">The value which will replace the existing element.</param>
            <returns>
            A copy of <see cref="P:Ploeh.AutoFixture.Idioms.IndexedReplacement`1.Source"/> where the pre-selected element has been replaced with
            <paramref name="value"/>.
            </returns>
            <remarks>
            <para>
            This method replaces an element in <see cref="P:Ploeh.AutoFixture.Idioms.IndexedReplacement`1.Source"/> with
            <paramref name="value"/>. The element to be replaced is the element at the
            <see cref="P:Ploeh.AutoFixture.Idioms.IndexedReplacement`1.ReplacementIndex"/>. The replacement is not done directly in the
            <see cref="P:Ploeh.AutoFixture.Idioms.IndexedReplacement`1.Source"/>, but rather in a copy which is then returned by the method call.
            </para>
            </remarks>
        </member>
        <member name="P:Ploeh.AutoFixture.Idioms.IndexedReplacement`1.ReplacementIndex">
            <summary>
            Gets the index of the element which will be replaced by the <see cref="M:Ploeh.AutoFixture.Idioms.IndexedReplacement`1.Expand(`0)"/>
            method.
            </summary>
            <remarks>
            <para>The index is zero-based.</para>
            </remarks>
        </member>
        <member name="P:Ploeh.AutoFixture.Idioms.IndexedReplacement`1.Source">
            <summary>
            Gets the sequence of elements where one element will be replaced by the
            <see cref="M:Ploeh.AutoFixture.Idioms.IndexedReplacement`1.Expand(`0)"/> method.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.Idioms.MethodInfoExtensions.IsObjectEqualsMethod(System.Reflection.MethodInfo)">
            <summary>
            Gets a value that indicates if the method is the <see cref="M:System.Object.Equals(System.Object)"/>
            method declared on the <see cref="T:System.Object"/> type.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.Idioms.MethodInfoExtensions.IsObjectEqualsOverrideMethod(System.Reflection.MethodInfo)">
            <summary>
            Gets a value that indicates if the method is an override of the
            <see cref="M:System.Object.Equals(System.Object)"/> method.
            </summary>
        </member>
        <member name="T:Ploeh.AutoFixture.Idioms.MethodInvokeCommand">
            <summary>
            Invokes a method.
            </summary>
        </member>
        <member name="T:Ploeh.AutoFixture.Idioms.IGuardClauseCommand">
            <summary>
            Represents an action which can be invoked to verify whether or not an expectation about
            Guard Clause behavior is met, and what to do if that is not the case.
            </summary>
            <remarks>
            <para>
            This interface is a rather specialized interface supporting the implementation of
            <see cref="T:Ploeh.AutoFixture.Idioms.GuardClauseAssertion"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Ploeh.AutoFixture.Idioms.IGuardClauseCommand.Execute(System.Object)">
            <summary>
            Executes the action with the specified value.
            </summary>
            <param name="value">The value with wich the action is executed.</param>
            <remarks>
            <para>
            The <paramref name="value"/> is expected to be compatible with
            <see cref="P:Ploeh.AutoFixture.Idioms.IGuardClauseCommand.RequestedType"/>. It should be possible to cast the value to the requested
            type.
            </para>
            </remarks>
        </member>
        <member name="M:Ploeh.AutoFixture.Idioms.IGuardClauseCommand.CreateException(System.String)">
            <summary>
            Creates an exception which communicates that an error occured for a specific input
            value.
            </summary>
            <param name="value">A string representation of the value.</param>
            <returns>An exception which communicates the cause of the error.</returns>
            <remarks>
            <para>
            The <paramref name="value"/> is a string representation of the value supplied to the
            <see cref="M:Ploeh.AutoFixture.Idioms.IGuardClauseCommand.Execute(System.Object)"/> method. Together with the context contained within any
            implementation of <see cref="T:Ploeh.AutoFixture.Idioms.IGuardClauseCommand"/> this value can be used to build an
            exception message.
            </para>
            </remarks>
        </member>
        <member name="M:Ploeh.AutoFixture.Idioms.IGuardClauseCommand.CreateException(System.String,System.Exception)">
            <summary>
            Creates an exception which communicates that an error occured for a specific input
            value.
            </summary>
            <param name="value">A string representation of the value.</param>
            <param name="innerException">
            The exception that is the cause of the current exception.
            </param>
            <returns>An exception which communicates the cause of the error.</returns>
            <remarks>
            <para>
            The <paramref name="value"/> is a string representation of the value supplied to the
            <see cref="M:Ploeh.AutoFixture.Idioms.IGuardClauseCommand.Execute(System.Object)"/> method. Together with the context contained within any
            implementation of <see cref="T:Ploeh.AutoFixture.Idioms.IGuardClauseCommand"/> this value can be used to build an
            exception message.
            </para>
            </remarks>
        </member>
        <member name="P:Ploeh.AutoFixture.Idioms.IGuardClauseCommand.RequestedType">
            <summary>
            Gets the type of the requested value.
            </summary>
            <remarks>
            <para>
            The RequestedType property identifies the type of object which should be supplied to
            the <see cref="M:Ploeh.AutoFixture.Idioms.IGuardClauseCommand.Execute(System.Object)"/> method.
            </para>
            </remarks>
        </member>
        <member name="M:Ploeh.AutoFixture.Idioms.MethodInvokeCommand.#ctor(Ploeh.AutoFixture.Kernel.IMethod,Ploeh.AutoFixture.Idioms.IExpansion{System.Object},System.Reflection.ParameterInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.Idioms.MethodInvokeCommand"/> class.
            </summary>
            <param name="method">The method to invoke.</param>
            <param name="expansion">
            An expansion which is used to transform the single value in the Execute method into an
            appropriate number of input arguments for the method.
            </param>
            <param name="parameterInfo">The parameter.</param>
        </member>
        <member name="M:Ploeh.AutoFixture.Idioms.MethodInvokeCommand.Execute(System.Object)">
            <summary>
            Invokes the mthod with the specified value.
            </summary>
            <param name="value">The value with wich the method is executed.</param>
            <remarks>
            <para>
            Invokes <see cref="P:Ploeh.AutoFixture.Idioms.MethodInvokeCommand.Method"/> by expanding the single <paramref name="value"/> with
            the <see cref="P:Ploeh.AutoFixture.Idioms.MethodInvokeCommand.Expansion"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Ploeh.AutoFixture.Idioms.MethodInvokeCommand.CreateException(System.String)">
            <summary>
            Creates an exception which communicates that an error occured for a specific input
            value.
            </summary>
            <param name="value">A string representation of the value.</param>
            <returns>
            An exception which communicates the cause of the error.
            </returns>
        </member>
        <member name="M:Ploeh.AutoFixture.Idioms.MethodInvokeCommand.CreateException(System.String,System.Exception)">
            <summary>
            Creates an exception which communicates that an error occured for a specific input
            value.
            </summary>
            <param name="value">A string representation of the value.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
            <returns>
            An exception which communicates the cause of the error.
            </returns>
        </member>
        <member name="P:Ploeh.AutoFixture.Idioms.MethodInvokeCommand.Method">
            <summary>
            Gets the method supplied via the constructor.
            </summary>
        </member>
        <member name="P:Ploeh.AutoFixture.Idioms.MethodInvokeCommand.Expansion">
            <summary>
            Gets the expansion supplied via the constructor.
            </summary>
            <seealso cref="M:Ploeh.AutoFixture.Idioms.MethodInvokeCommand.Execute(System.Object)"/>
        </member>
        <member name="P:Ploeh.AutoFixture.Idioms.MethodInvokeCommand.ParameterInfo">
            <summary>
            Gets the parameter supplied via the constructor.
            </summary>
        </member>
        <member name="P:Ploeh.AutoFixture.Idioms.MethodInvokeCommand.RequestedType">
            <summary>
            Gets the type of the requested value.
            </summary>
            <remarks>
            The RequestedType property identifies the type of object which should be supplied to
            the <see cref="M:Ploeh.AutoFixture.Idioms.MethodInvokeCommand.Execute(System.Object)"/> method - in this case the type of the
            <see cref="P:Ploeh.AutoFixture.Idioms.MethodInvokeCommand.ParameterInfo"/>.
            </remarks>
        </member>
        <member name="T:Ploeh.AutoFixture.Idioms.GuardClauseException">
            <summary>
            Represents an error about a missing Guard Clause.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.Idioms.GuardClauseException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.Idioms.GuardClauseException"/> class.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.Idioms.GuardClauseException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.Idioms.GuardClauseException"/> class.
            </summary>
            <param name="message">
            The error message that explains the reason for the exception.
            </param>
        </member>
        <member name="M:Ploeh.AutoFixture.Idioms.GuardClauseException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.Idioms.GuardClauseException"/> class.
            </summary>
            <param name="message">
            The error message that explains the reason for the exception.
            </param>
            <param name="innerException">
            The exception that is the cause of the current exception.
            </param>
        </member>
        <member name="M:Ploeh.AutoFixture.Idioms.GuardClauseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.Idioms.GuardClauseException"/> class.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the
            serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains
            contextual information about the source or destination.
            </param>
        </member>
        <member name="T:Ploeh.AutoFixture.Idioms.NullReferenceBehaviorExpectation">
            <summary>
            Encapsulates expectations about the behavior of a method or constructor when it's invoked
            with a null argument.
            </summary>
            <remarks>
            <para>
            The NullReferenceBehaviorExpectation class encapsulates the following expectation: when an
            action (such as a method call or constructor invocation) is performed with a
            <see langword="null"/> argument it should raise an <see cref="T:System.ArgumentNullException"/>. If
            this happens the expectation is verified. If no exception, or any other type of exception,
            is thrown the expectation isn't met.
            </para>
            </remarks>
        </member>
        <member name="M:Ploeh.AutoFixture.Idioms.NullReferenceBehaviorExpectation.Verify(Ploeh.AutoFixture.Idioms.IGuardClauseCommand)">
            <summary>
            Verifies that the command behaves correct when invoked with a null argument.
            </summary>
            <param name="command">The command whose behavior must be examined.</param>
            <remarks>
            <para>
            The Verify method attempts to invoke the <paramref name="command"/> instance's
            <see cref="M:Ploeh.AutoFixture.Idioms.IGuardClauseCommand.Execute(System.Object)"/> with <see langword="null"/>. The expected
            result is that this action throws an <see cref="T:System.ArgumentNullException"/>, in which
            case the expected behavior is considered verified. If any other exception is thrown, or
            if no exception is thrown at all, the verification fails and an exception is thrown.
            </para>
            <para>
            The behavior is only asserted if the command's
            <see cref="P:Ploeh.AutoFixture.Idioms.IGuardClauseCommand.RequestedType"/> is nullable. In case of value types,
            no action is performed.
            </para>
            </remarks>
        </member>
        <member name="T:Ploeh.AutoFixture.Idioms.PropertySetCommand">
            <summary>
            Assigns a value to a property.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.Idioms.PropertySetCommand.#ctor(System.Reflection.PropertyInfo,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.Idioms.PropertySetCommand"/> class.
            </summary>
            <param name="propertyInfo">The property which should have a value assigned.</param>
            <param name="owner">The instance exposing the property.</param>
            <remarks>
            <para>
            Although the constructor doesn't enforce this, the <paramref name="owner"/> is
            expected to expose the property identified by <paramref name="propertyInfo"/>. If not,
            the <see cref="M:Ploeh.AutoFixture.Idioms.PropertySetCommand.Execute(System.Object)"/> method will fail.
            </para>
            </remarks>
        </member>
        <member name="M:Ploeh.AutoFixture.Idioms.PropertySetCommand.Execute(System.Object)">
            <summary>
            Executes the action with the specified value.
            </summary>
            <param name="value">The value with wich the action is executed.</param>
            <remarks>
            <para>
            Assigns <paramref name="value"/> to the <see cref="P:Ploeh.AutoFixture.Idioms.PropertySetCommand.PropertyInfo"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Ploeh.AutoFixture.Idioms.PropertySetCommand.CreateException(System.String)">
            <summary>
            Creates an exception which communicates that an error occured for a specific input
            value.
            </summary>
            <param name="value">A string representation of the value.</param>
            <returns>
            An exception which communicates the cause of the error.
            </returns>
        </member>
        <member name="M:Ploeh.AutoFixture.Idioms.PropertySetCommand.CreateException(System.String,System.Exception)">
            <summary>
            Creates an exception which communicates that an error occured for a specific input
            value.
            </summary>
            <param name="value">A string representation of the value.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
            <returns>
            An exception which communicates the cause of the error.
            </returns>
        </member>
        <member name="P:Ploeh.AutoFixture.Idioms.PropertySetCommand.Owner">
            <summary>
            Gets the owner supplied via the constructor.
            </summary>
        </member>
        <member name="P:Ploeh.AutoFixture.Idioms.PropertySetCommand.PropertyInfo">
            <summary>
            Gets the property supplied via the constructor.
            </summary>
        </member>
        <member name="P:Ploeh.AutoFixture.Idioms.PropertySetCommand.RequestedType">
            <summary>
            Gets the type of the requested value.
            </summary>
            <value></value>
            <remarks>
            The RequestedType property identifies the type of object which should be supplied to
            the <see cref="M:Ploeh.AutoFixture.Idioms.PropertySetCommand.Execute(System.Object)"/> method - in this case the type of the
            <see cref="P:Ploeh.AutoFixture.Idioms.PropertySetCommand.PropertyInfo"/>.
            </remarks>
        </member>
        <member name="T:Ploeh.AutoFixture.Idioms.GuardClauseAssertion">
            <summary>
            Encapsulates a unit test that verifies that a method or constructor has appropriate Guard
            Clauses in place.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.Idioms.GuardClauseAssertion.#ctor(Ploeh.AutoFixture.Kernel.ISpecimenBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.Idioms.GuardClauseAssertion"/> class.
            </summary>
            <param name="builder">
            A composer which can create instances required to implement the idiomatic unit test.
            </param>
            <remarks>
            <para>
            <paramref name="builder"/> will typically be a <see cref="T:Ploeh.AutoFixture.Fixture"/> instance.
            </para>
            </remarks>
        </member>
        <member name="M:Ploeh.AutoFixture.Idioms.GuardClauseAssertion.#ctor(Ploeh.AutoFixture.Kernel.ISpecimenBuilder,Ploeh.AutoFixture.Idioms.IBehaviorExpectation)">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.Idioms.GuardClauseAssertion"/> class.
            </summary>
            <param name="builder">
            A composer which can create instances required to implement the idiomatic unit test.
            </param>
            <param name="behaviorExpectation">
            A behavior expectation to override the default expectation.
            </param>
            <remarks>
            <para>
            <paramref name="builder"/> will typically be a <see cref="T:Ploeh.AutoFixture.Fixture"/> instance.
            </para>
            </remarks>
        </member>
        <member name="M:Ploeh.AutoFixture.Idioms.GuardClauseAssertion.Verify(System.Reflection.ConstructorInfo)">
            <summary>
            Verifies that a constructor has appropriate Guard Clauses in place.
            </summary>
            <param name="constructorInfo">The constructor.</param>
            <remarks>
            <para>
            Exactly which Guard Clauses are verified is defined by
            <see cref="P:Ploeh.AutoFixture.Idioms.GuardClauseAssertion.BehaviorExpectation"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Ploeh.AutoFixture.Idioms.GuardClauseAssertion.Verify(System.Reflection.MethodInfo)">
            <summary>
            Verifies that a method has appropriate Guard Clauses in place.
            </summary>
            <param name="methodInfo">The method.</param>
            <remarks>
            <para>
            Exactly which Guard Clauses are verified is defined by
            <see cref="P:Ploeh.AutoFixture.Idioms.GuardClauseAssertion.BehaviorExpectation"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Ploeh.AutoFixture.Idioms.GuardClauseAssertion.Verify(System.Reflection.PropertyInfo)">
            <summary>
            Verifies that a property has appropriate Guard Clauses in place.
            </summary>
            <param name="propertyInfo">The property.</param>
            <remarks>
            <para>
            Exactly which Guard Clauses are verified is defined by
            <see cref="P:Ploeh.AutoFixture.Idioms.GuardClauseAssertion.BehaviorExpectation"/>.
            </para>
            </remarks>
        </member>
        <member name="P:Ploeh.AutoFixture.Idioms.GuardClauseAssertion.Builder">
            <summary>
            Gets the builder supplied via the constructor.
            </summary>
        </member>
        <member name="P:Ploeh.AutoFixture.Idioms.GuardClauseAssertion.BehaviorExpectation">
            <summary>
            Gets the behavior expectation.
            </summary>
            <remarks>
            <para>
            GuardClauseAssertion contains an appropriate default implementation of
            <see cref="T:Ploeh.AutoFixture.Idioms.IBehaviorExpectation"/>, but a custom behavior can also be supplied via one
            of the constructor overloads. In any case, this property exposes the behavior
            expectation.
            </para>
            </remarks>
            <seealso cref="M:Ploeh.AutoFixture.Idioms.GuardClauseAssertion.#ctor(Ploeh.AutoFixture.Kernel.ISpecimenBuilder,Ploeh.AutoFixture.Idioms.IBehaviorExpectation)"/>
        </member>
        <member name="T:Ploeh.AutoFixture.Idioms.ConstructorInitializedMemberAssertion">
            <summary>
            Encapsulates a unit test that verifies that a member (property or field) is correctly intialized
            by the constructor.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.Idioms.ConstructorInitializedMemberAssertion.#ctor(Ploeh.AutoFixture.Kernel.ISpecimenBuilder,System.Collections.IEqualityComparer,System.Collections.Generic.IEqualityComparer{Ploeh.Albedo.IReflectionElement})">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.Idioms.ConstructorInitializedMemberAssertion"/> class.
            </summary>
            <param name="builder">
            A composer which can create instances required to implement the idiomatic unit test,
            such as the owner of the property, as well as the value to be assigned and read from
            the member.
            </param>
            <param name="comparer"> An <see cref="T:System.Collections.IEqualityComparer"/> instance, which is used 
            to determine if each member has the same value which was passed to the matching 
            constructor parameter.
            </param>
            <param name="parameterMemberMatcher">Provides a way to customize the way parameters
            are matched to members. The boolean value returned from
            <see cref="M:System.Collections.Generic.IEqualityComparer`1.Equals(`0,`0)"/> indicates if the parameter and member
            are matched.
            </param>
            <remarks>
            <para>
            <paramref name="builder"/> will typically be a <see cref="T:Ploeh.AutoFixture.Fixture"/> instance.
            </para>
            </remarks>
        </member>
        <member name="M:Ploeh.AutoFixture.Idioms.ConstructorInitializedMemberAssertion.#ctor(Ploeh.AutoFixture.Kernel.ISpecimenBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.Idioms.ConstructorInitializedMemberAssertion"/> class.
            </summary>
            <param name="builder">
            A composer which can create instances required to implement the idiomatic unit test,
            such as the owner of the property, as well as the value to be assigned and read from
            the member.
            </param>
            <remarks>
            <para>
            <paramref name="builder"/> will typically be a <see cref="T:Ploeh.AutoFixture.Fixture"/> instance.
            </para>
            </remarks>
        </member>
        <member name="M:Ploeh.AutoFixture.Idioms.ConstructorInitializedMemberAssertion.Verify(System.Reflection.ConstructorInfo)">
            <summary>
            Verifies that all constructor arguments are properly exposed as either fields
            or properties.
            </summary>
            <param name="constructorInfo">The constructor.</param>
        </member>
        <member name="M:Ploeh.AutoFixture.Idioms.ConstructorInitializedMemberAssertion.Verify(System.Reflection.PropertyInfo)">
            <summary>
            Verifies that a property is correctly initialized by the constructor.
            </summary>
            <param name="propertyInfo">The property.</param>
            <remarks>
            <para>
            This method verifies that the <paramref name="propertyInfo"/> is correctly initialized with
            the value given to the same-named constructor paramter. It uses the <see cref="P:Ploeh.AutoFixture.Idioms.ConstructorInitializedMemberAssertion.Builder"/> to
            supply values to the constructor(s) of the Type on which the field is implemented, and then
            reads from the field. The assertion passes if the value read from the property is the same as
            the value passed to the constructor. If more than one constructor has an argument with the
            same name and type, all constructors are checked. If any constructor (with a matching argument)
            does not initialise the property with the correct value, a 
            <see cref="T:Ploeh.AutoFixture.Idioms.ConstructorInitializedMemberException"/> is thrown.
            </para>
            </remarks>
            <exception cref="T:Ploeh.AutoFixture.Idioms.WritablePropertyException">The verification fails.</exception>
        </member>
        <member name="M:Ploeh.AutoFixture.Idioms.ConstructorInitializedMemberAssertion.Verify(System.Reflection.FieldInfo)">
            <summary>
            Verifies that a field is correctly initialized by the constructor.
            </summary>
            <param name="fieldInfo">The field.</param>
            <remarks>
            <para>
            This method verifies that <paramref name="fieldInfo"/> is correctly initialized with the
            value given to the same-named constructor paramter. It uses the <see cref="P:Ploeh.AutoFixture.Idioms.ConstructorInitializedMemberAssertion.Builder"/> to
            supply values to the constructor(s) of the Type on which the field is implemented, and then
            reads from the field. The assertion passes if the value read from the field is the same as
            the value passed to the constructor. If more than one constructor has an argument with the
            same name and type, all constructors are checked. If any constructor does not initialise
            the field with the correct value, a <see cref="T:Ploeh.AutoFixture.Idioms.ConstructorInitializedMemberException"/> 
            is thrown.
            </para>
            </remarks>
            <exception cref="T:Ploeh.AutoFixture.Idioms.ConstructorInitializedMemberException">The verification fails.</exception>
        </member>
        <member name="P:Ploeh.AutoFixture.Idioms.ConstructorInitializedMemberAssertion.Builder">
            <summary>
            Gets the builder supplied by the constructor.
            </summary>
        </member>
        <member name="P:Ploeh.AutoFixture.Idioms.ConstructorInitializedMemberAssertion.Comparer">
            <summary>
            Gets the comparer supplied to the constructor.
            </summary>
            <remarks>
            This comparer instance is used to determine if all of the value retreived from
            the members are equal to their corresponding 'matched' constructor parameter.
            </remarks>
        </member>
        <member name="P:Ploeh.AutoFixture.Idioms.ConstructorInitializedMemberAssertion.ParameterMemberMatcher">
            <summary>
            Gets the <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> instance which is
            used to determine if a constructor parameter matches a given member (property
            or field).
            </summary>
            <remarks>
            If the parameter and member are matched, the member is expected to be initialized
            from the value passed into the matching constructor parameter.
            </remarks>
        </member>
        <member name="T:Ploeh.AutoFixture.Idioms.ConstructorInitializedMemberException">
            <summary>
            Represents a verification error when testing whether a read-only property is correctly
            implemented.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.Idioms.ConstructorInitializedMemberException.#ctor(System.Reflection.ConstructorInfo,System.Reflection.ParameterInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.Idioms.ConstructorInitializedMemberException"/> class.
            </summary>
            <param name="constructorInfo">The Constructor.</param>
            <param name="missingParameter">The parameter that was not exposed as a field or property.</param>
        </member>
        <member name="M:Ploeh.AutoFixture.Idioms.ConstructorInitializedMemberException.#ctor(System.Reflection.ConstructorInfo,System.Reflection.ParameterInfo,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.Idioms.ConstructorInitializedMemberException"/> class.
            </summary>
            <param name="constructorInfo">The Constructor.</param>
            <param name="missingParameter">The parameter that was not exposed as a field or property.</param>
            <param name="message">
            The error message that explains the reason for the exception.
            </param>
        </member>
        <member name="M:Ploeh.AutoFixture.Idioms.ConstructorInitializedMemberException.#ctor(System.Reflection.ConstructorInfo,System.Reflection.ParameterInfo,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.Idioms.ConstructorInitializedMemberException"/> class.
            </summary>
            <param name="constructorInfo">The Constructor.</param>
            <param name="missingParameter">The parameter that was not exposed as a field or property.</param>
            <param name="message">
            The error message that explains the reason for the exception.
            </param>
            <param name="innerException">
            The exception that is the cause of the current exception.
            </param>
        </member>
        <member name="M:Ploeh.AutoFixture.Idioms.ConstructorInitializedMemberException.#ctor(System.Reflection.FieldInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.Idioms.ConstructorInitializedMemberException"/> class.
            </summary>
            <param name="fieldInfo">The field.</param>
        </member>
        <member name="M:Ploeh.AutoFixture.Idioms.ConstructorInitializedMemberException.#ctor(System.Reflection.FieldInfo,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.Idioms.ConstructorInitializedMemberException"/> class.
            </summary>
            <param name="fieldInfo">The field.</param>
            <param name="message">
            The error message that explains the reason for the exception.
            </param>
        </member>
        <member name="M:Ploeh.AutoFixture.Idioms.ConstructorInitializedMemberException.#ctor(System.Reflection.FieldInfo,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.Idioms.ConstructorInitializedMemberException"/> class.
            </summary>
            <param name="fieldInfo">The field.</param>
            <param name="message">
            The error message that explains the reason for the exception.
            </param>
            <param name="innerException">
            The exception that is the cause of the current exception.
            </param>
        </member>
        <member name="M:Ploeh.AutoFixture.Idioms.ConstructorInitializedMemberException.#ctor(System.Reflection.PropertyInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.Idioms.ConstructorInitializedMemberException"/> class.
            </summary>
            <param name="propertyInfo">The property.</param>
        </member>
        <member name="M:Ploeh.AutoFixture.Idioms.ConstructorInitializedMemberException.#ctor(System.Reflection.PropertyInfo,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.Idioms.ConstructorInitializedMemberException"/> class.
            </summary>
            <param name="propertyInfo">The property.</param>
            <param name="message">
            The error message that explains the reason for the exception.
            </param>
        </member>
        <member name="M:Ploeh.AutoFixture.Idioms.ConstructorInitializedMemberException.#ctor(System.Reflection.PropertyInfo,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.Idioms.ConstructorInitializedMemberException"/> class.
            </summary>
            <param name="propertyInfo">The property.</param>
            <param name="message">
            The error message that explains the reason for the exception.
            </param>
            <param name="innerException">
            The exception that is the cause of the current exception.
            </param>
        </member>
        <member name="M:Ploeh.AutoFixture.Idioms.ConstructorInitializedMemberException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.Idioms.ConstructorInitializedMemberException"/> class with
            serialized data.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the
            serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains
            contextual information about the source or destination.
            </param>
        </member>
        <member name="M:Ploeh.AutoFixture.Idioms.ConstructorInitializedMemberException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Adds <see cref="P:Ploeh.AutoFixture.Idioms.ConstructorInitializedMemberException.PropertyInfo"/> to a
            <see cref="T:System.Runtime.Serialization.SerializationInfo"/>.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the
            serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains
            contextual information about the source or destination.
            </param>
        </member>
        <member name="P:Ploeh.AutoFixture.Idioms.ConstructorInitializedMemberException.MemberInfo">
            <summary>
            Gets the property or field supplied via the constructor.
            </summary>
        </member>
        <member name="P:Ploeh.AutoFixture.Idioms.ConstructorInitializedMemberException.PropertyInfo">
            <summary>
            Gets the property supplied via the constructor.
            </summary>
        </member>
        <member name="P:Ploeh.AutoFixture.Idioms.ConstructorInitializedMemberException.FieldInfo">
            <summary>
            Gets the property supplied via the constructor.
            </summary>
        </member>
        <member name="P:Ploeh.AutoFixture.Idioms.ConstructorInitializedMemberException.ConstructorInfo">
            <summary>
            Gets the constructor which has a <see cref="P:Ploeh.AutoFixture.Idioms.ConstructorInitializedMemberException.MissingParameter"/>.
            </summary>
        </member>
        <member name="P:Ploeh.AutoFixture.Idioms.ConstructorInitializedMemberException.MissingParameter">
            <summary>
            Gets the parameter that was not exposed as a field or property.
            </summary>
        </member>
        <member name="T:Ploeh.AutoFixture.Idioms.ReflectionExceptionUnwrappingCommand">
            <summary>
            Decorates another <see cref="T:Ploeh.AutoFixture.Idioms.IGuardClauseCommand"/> and unwraps
            <see cref="T:System.Reflection.TargetInvocationException"/> occurances from the <see cref="M:Ploeh.AutoFixture.Idioms.ReflectionExceptionUnwrappingCommand.Execute(System.Object)"/> method.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.Idioms.ReflectionExceptionUnwrappingCommand.#ctor(Ploeh.AutoFixture.Idioms.IGuardClauseCommand)">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.Idioms.ReflectionExceptionUnwrappingCommand"/>
            class.
            </summary>
            <param name="command">The decorated command.</param>
        </member>
        <member name="M:Ploeh.AutoFixture.Idioms.ReflectionExceptionUnwrappingCommand.Execute(System.Object)">
            <summary>
            Executes the action on the decorated <see cref="P:Ploeh.AutoFixture.Idioms.ReflectionExceptionUnwrappingCommand.Command"/>. If a
            <see cref="T:System.Reflection.TargetInvocationException"/> is thrown, it's unwrapped and its
            <see cref="P:System.Exception.InnerException"/> is thrown instead.
            </summary>
            <param name="value">The value with wich the action is executed.</param>
        </member>
        <member name="M:Ploeh.AutoFixture.Idioms.ReflectionExceptionUnwrappingCommand.CreateException(System.String)">
            <summary>
            Creates an exception which communicates that an error occured for a specific input
            value.
            </summary>
            <param name="value">A string representation of the value.</param>
            <returns>
            The exception created by the decorated <see cref="P:Ploeh.AutoFixture.Idioms.ReflectionExceptionUnwrappingCommand.Command"/>.
            </returns>
        </member>
        <member name="M:Ploeh.AutoFixture.Idioms.ReflectionExceptionUnwrappingCommand.CreateException(System.String,System.Exception)">
            <summary>
            Creates an exception which communicates that an error occured for a specific input
            value.
            </summary>
            <param name="value">A string representation of the value.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
            <returns>
            The exception created by the decorated <see cref="P:Ploeh.AutoFixture.Idioms.ReflectionExceptionUnwrappingCommand.Command"/>.
            </returns>
        </member>
        <member name="P:Ploeh.AutoFixture.Idioms.ReflectionExceptionUnwrappingCommand.Command">
            <summary>
            Gets the decorated command supplied via the constructor.
            </summary>
        </member>
        <member name="P:Ploeh.AutoFixture.Idioms.ReflectionExceptionUnwrappingCommand.RequestedType">
            <summary>
            Gets the type of the requested value.
            </summary>
            <remarks>
            <para>
            The return value is the return value of the decorated <see cref="P:Ploeh.AutoFixture.Idioms.ReflectionExceptionUnwrappingCommand.Command"/> instance's
            <see cref="P:Ploeh.AutoFixture.Idioms.IGuardClauseCommand.RequestedType"/> property.
            </para>
            </remarks>
        </member>
        <member name="T:Ploeh.AutoFixture.Idioms.NameAndType">
            <summary>
            Holds a name and type. Instances are equal when the names are the
            same (ignoring case) and the types are exactly the same.
            </summary>
        </member>
        <member name="T:Ploeh.AutoFixture.Idioms.NameAndTypeCollectingVisitor">
            <summary>
            Collections <see cref="T:Ploeh.AutoFixture.Idioms.NameAndType"/> instances from <see cref="T:Ploeh.Albedo.FieldInfoElement"/>,
            <see cref="T:Ploeh.Albedo.ParameterInfoElement"/>, and <see cref="T:Ploeh.Albedo.PropertyInfoElement"/>.
            </summary>
        </member>
        <member name="T:Ploeh.AutoFixture.Idioms.WritablePropertyAssertion">
            <summary>
            Encapsulates a unit test that verifies that a writable property is correctly implemented.
            </summary>
            <remarks>
            <para>
            According to the framework design guidelines, a writable property should always have both a
            setter and getter. In order not to violate the Principle of Least Astonishment the getter
            should always return the object assigned via the setter. Thus, for every writable property
            one should always write a unit test that verifies that the value read from the proeprty is
            the same as the value assigned to the property.
            </para>
            <para>
            However, such unit tests become tedious and repetitive to write; together, they form a unit
            testing idiom for .NET. This <see cref="T:Ploeh.AutoFixture.Idioms.IIdiomaticAssertion"/> encapsulates this idiom.
            </para>
            </remarks>
        </member>
        <member name="M:Ploeh.AutoFixture.Idioms.WritablePropertyAssertion.#ctor(Ploeh.AutoFixture.Kernel.ISpecimenBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.Idioms.WritablePropertyAssertion"/> class.
            </summary>
            <param name="builder">
            A composer which can create instances required to implement the idiomatic unit test,
            such as the owner of the property, as well as the value to be assigned and read from
            the property.
            </param>
            <remarks>
            <para>
            <paramref name="builder"/> will typically be a <see cref="T:Ploeh.AutoFixture.Fixture"/> instance.
            </para>
            </remarks>
        </member>
        <member name="M:Ploeh.AutoFixture.Idioms.WritablePropertyAssertion.Verify(System.Reflection.PropertyInfo)">
            <summary>
            Verifies that a writable property is correctly implemented.
            </summary>
            <param name="propertyInfo">The property.</param>
            <remarks>
            <para>
            This method verifies that <paramref name="propertyInfo"/> is correctly implemented as
            a writable property. It used the <see cref="P:Ploeh.AutoFixture.Idioms.WritablePropertyAssertion.Builder"/> to create an instance of the
            Type on which the property is implemented and then assigns to and reads from the
            property. The assertion passes if the value read from the property is the same as the
            value assigned to it. If this is not the case, a
            <see cref="T:Ploeh.AutoFixture.Idioms.WritablePropertyException"/> is thrown.
            </para>
            <para>
            This method does nothing if the property is not a writable property.
            </para>
            </remarks>
            <exception cref="T:Ploeh.AutoFixture.Idioms.WritablePropertyException">The verification fails.</exception>
        </member>
        <member name="P:Ploeh.AutoFixture.Idioms.WritablePropertyAssertion.Builder">
            <summary>
            Gets the builder supplied via the constructor.
            </summary>
        </member>
        <member name="T:Ploeh.AutoFixture.Idioms.WritablePropertyException">
            <summary>
            Represents a verification error when testing whether a writable property is correctly
            implemented.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.Idioms.WritablePropertyException.#ctor(System.Reflection.PropertyInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.Idioms.WritablePropertyException"/> class.
            </summary>
            <param name="propertyInfo">The property.</param>
        </member>
        <member name="M:Ploeh.AutoFixture.Idioms.WritablePropertyException.#ctor(System.Reflection.PropertyInfo,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.Idioms.WritablePropertyException"/> class.
            </summary>
            <param name="propertyInfo">The property.</param>
            <param name="message">
            The error message that explains the reason for the exception.
            </param>
        </member>
        <member name="M:Ploeh.AutoFixture.Idioms.WritablePropertyException.#ctor(System.Reflection.PropertyInfo,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.Idioms.WritablePropertyException"/> class.
            </summary>
            <param name="propertyInfo">The property.</param>
            <param name="message">
            The error message that explains the reason for the exception.
            </param>
            <param name="innerException">
            The exception that is the cause of the current exception.
            </param>
        </member>
        <member name="M:Ploeh.AutoFixture.Idioms.WritablePropertyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.Idioms.WritablePropertyException"/> class with
            serialized data.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the
            serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains
            contextual information about the source or destination.
            </param>
        </member>
        <member name="M:Ploeh.AutoFixture.Idioms.WritablePropertyException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Adds <see cref="P:Ploeh.AutoFixture.Idioms.WritablePropertyException.PropertyInfo"/> to a
            <see cref="T:System.Runtime.Serialization.SerializationInfo"/>.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the
            serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains
            contextual information about the source or destination.
            </param>
        </member>
        <member name="P:Ploeh.AutoFixture.Idioms.WritablePropertyException.PropertyInfo">
            <summary>
            Gets the property supplied via the constructor.
            </summary>
        </member>
        <member name="T:Ploeh.AutoFixture.Idioms.EqualsNewObjectAssertion">
            <summary>
            Encapsulates a unit test that verifies that a type which overrides the
            <see cref="M:System.Object.Equals(System.Object)"/> method is implemented correctly with
            respect to the rule: calling `x.Equals(new object())` returns false.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.Idioms.EqualsNewObjectAssertion.#ctor(Ploeh.AutoFixture.Kernel.ISpecimenBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.Idioms.EqualsNewObjectAssertion"/> class.
            </summary>
            <param name="builder">
            A composer which can create instances required to implement the idiomatic unit test,
            such as the owner of the property, as well as the value to be assigned and read from
            the member.
            </param>
            <remarks>
            <para>
            <paramref name="builder"/> will typically be a <see cref="T:Ploeh.AutoFixture.Fixture"/> instance.
            </para>
            </remarks>
        </member>
        <member name="M:Ploeh.AutoFixture.Idioms.EqualsNewObjectAssertion.Verify(System.Reflection.MethodInfo)">
            <summary>
            Verifies that calling `x.Equals(new object())` on an instance of the type 
            returns false, if the supplied method is an override of the 
            <see cref="M:System.Object.Equals(System.Object)"/>.
            </summary>
            <param name="methodInfo">The method to verify</param>
        </member>
        <member name="P:Ploeh.AutoFixture.Idioms.EqualsNewObjectAssertion.Builder">
            <summary>
            Gets the builder supplied by the constructor.
            </summary>
        </member>
        <member name="T:Ploeh.AutoFixture.Idioms.EqualsNullAssertion">
            <summary>
            Encapsulates a unit test that verifies that a type which overrides the
            <see cref="M:System.Object.Equals(System.Object)"/> method is implemented correctly with
            respect to the rule: calling `x.Equals(null)` returns false.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.Idioms.EqualsNullAssertion.#ctor(Ploeh.AutoFixture.Kernel.ISpecimenBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.Idioms.EqualsNullAssertion"/> class.
            </summary>
            <param name="builder">
            A composer which can create instances required to implement the idiomatic unit test,
            such as the owner of the property, as well as the value to be assigned and read from
            the member.
            </param>
            <remarks>
            <para>
            <paramref name="builder"/> will typically be a <see cref="T:Ploeh.AutoFixture.Fixture"/> instance.
            </para>
            </remarks>
        </member>
        <member name="M:Ploeh.AutoFixture.Idioms.EqualsNullAssertion.Verify(System.Reflection.MethodInfo)">
            <summary>
            Verifies that calling `x.Equals(null)` on the method returns false, if the supplied
            method is an override of the <see cref="M:System.Object.Equals(System.Object)"/>.
            </summary>
            <param name="methodInfo">The Equals method to verify</param>
        </member>
        <member name="P:Ploeh.AutoFixture.Idioms.EqualsNullAssertion.Builder">
            <summary>
            Gets the builder supplied by the constructor.
            </summary>
        </member>
        <member name="T:Ploeh.AutoFixture.Idioms.EqualsSuccessiveAssertion">
            <summary>
            Encapsulates a unit test that verifies that a type which overrides the
            <see cref="M:System.Object.Equals(System.Object)"/> method is implemented correctly with
            respect to the rule: calling `x.Equals(y)` 3 times returns same value.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.Idioms.EqualsSuccessiveAssertion.#ctor(Ploeh.AutoFixture.Kernel.ISpecimenBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.Idioms.EqualsSuccessiveAssertion"/> class.
            </summary>
            <param name="builder">
            A composer which can create instances required to implement the idiomatic unit test,
            such as the owner of the property, as well as the value to be assigned and read from
            the member.
            </param>
            <remarks>
            <para>
            <paramref name="builder"/> will typically be a <see cref="T:Ploeh.AutoFixture.Fixture"/> instance.
            </para>
            </remarks>
        </member>
        <member name="M:Ploeh.AutoFixture.Idioms.EqualsSuccessiveAssertion.Verify(System.Reflection.MethodInfo)">
            <summary>
            Verifies that `x.Equals(y)` 3 times on an instance of the type returns same
            value, if the supplied method is an override of the 
            <see cref="M:System.Object.Equals(System.Object)"/>.
            </summary>
            <param name="methodInfo">The method to verify</param>
        </member>
        <member name="P:Ploeh.AutoFixture.Idioms.EqualsSuccessiveAssertion.Builder">
            <summary>
            Gets the builder supplied by the constructor.
            </summary>
        </member>
        <member name="T:Ploeh.AutoFixture.Idioms.EqualsSelfAssertion">
            <summary>
            Encapsulates a unit test that verifies that a type which overrides the
            <see cref="M:System.Object.Equals(System.Object)"/> method is implemented correctly with
            respect to the rule: calling `x.Equals(x)` returns true.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.Idioms.EqualsSelfAssertion.#ctor(Ploeh.AutoFixture.Kernel.ISpecimenBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.Idioms.EqualsSelfAssertion"/> class.
            </summary>
            <param name="builder">
            A composer which can create instances required to implement the idiomatic unit test,
            such as the owner of the property, as well as the value to be assigned and read from
            the member.
            </param>
            <remarks>
            <para>
            <paramref name="builder"/> will typically be a <see cref="T:Ploeh.AutoFixture.Fixture"/> instance.
            </para>
            </remarks>
        </member>
        <member name="M:Ploeh.AutoFixture.Idioms.EqualsSelfAssertion.Verify(System.Reflection.MethodInfo)">
            <summary>
            Verifies that `calling `x.Equals(x)' on an instance of the type returns true
            if the supplied method is an override of the <see cref="M:System.Object.Equals(System.Object)"/>.
            </summary>
            <param name="methodInfo">The method to verify</param>
        </member>
        <member name="P:Ploeh.AutoFixture.Idioms.EqualsSelfAssertion.Builder">
            <summary>
            Gets the builder supplied by the constructor.
            </summary>
        </member>
    </members>
</doc>
